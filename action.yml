name: Delete Branch Resources
author: DevOps
description: Delete branch resources

inputs:
  branch-name:
    description: 'Branch name or github.event.ref'
    required: true
  namespace:
    description: 'Helm namespace'
    required: true
  release-names-array:
    description: 'Release names array'
    default: ''
    required: true
  delete-branch-db:
    description: 'Delete branch database'
    required: false
    default: 'false' 
  aws-access-key-id:
    description: 'AWS Access Key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
  aws-account-id:
    description: 'AWS Account ID'
    default: '305628290583'
    required: false
  aws-region:
    description: 'AWS Region'
    default: 'us-east-1'
    required: false
  cdk-folder:
    description: 'CDK folder path. Default is deploy.'
    required: false
    default: 'deploy'
    
runs:
  using: 'composite'
  steps:  
  - name: Extract branch name
    id: extract_branch    
    run: |
      export UNESCAPED_BRANCH_NAME=${{ inputs.branch-name }}
      echo "branch=$(echo ${UNESCAPED_BRANCH_NAME})" >> $GITHUB_OUTPUT | sed "s%refs\/heads\/%%g"
      echo "clean-branch=$(echo ${UNESCAPED_BRANCH_NAME} | sed 's/_//g' | tr '[:upper:]' '[:lower:]' | cut -c -38)" >> $GITHUB_OUTPUT | sed "s%refs\/heads\/%%g" 
      # The CDK needs the original unaltered branch name.
    shell: bash
      
  - name: Branch Validation    
    run: |
      branch_name=${{ steps.extract_branch.outputs.branch }}
      if [[ ("$branch_name" == "main") || ("$branch_name" == "master") || ("$branch_name" == "_InitialSolutionRename") ]];
      then
        echo "Validation failed. BRANCH=$branch_name resources cannot be deleted."
        exit 1
      fi
    shell: bash
     
  - name: Branch Outputs
    run: |
      echo ${{ steps.extract_branch.outputs.clean-branch }}
      echo ${{ steps.extract_branch.outputs.branch }}
    shell: bash

  - name: Release names check
    id: release-name    
    run: |     
      if [ -z "${{ inputs.release-names-array }}" ]; 
      then
        echo "use-default=false" >> $GITHUB_OUTPUT
      else
        echo "use-default=true" >> $GITHUB_OUTPUT
      fi
    shell: bash

  - name: Checkout code
    id: checkout_code
    uses: actions/checkout@v4

  - name: Authenticate with DEV
    id: authenticate_dev
    uses: aws-actions/configure-aws-credentials@v4
    with:
      aws-access-key-id: ${{ inputs.aws-access-key-id }}
      aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
      aws-region: ${{ inputs.aws-region }}

  - name: Uninstall Helm using default release name
    id: uninstall_default_helm
    if: ${{ steps.release-name.outputs.use-default && always() }}
    env:
      NAMESPACE: ${{ inputs.namespace }}    
    run: |
      release_name=${NAMESPACE}-${{ steps.extract_branch.outputs.clean-branch }}
      echo "uninstall -n ${NAMESPACE} $release_name"
      helm uninstall -n ${NAMESPACE} $release_name || exit_code=$?
    shell: bash 

  - name: Uninstall Helm using release names
    id: uninstall_helm_releases
    if: ${{ (steps.release-name.outputs.use-default == false) && always() }}
    env:
      NAMESPACE: ${{ inputs.namespace }}    
    run: |
      release_names=${{ inputs.release-names-array }}
      for r in ${release_names[@]};
      do
        release_name=$r-${{ steps.extract_branch.outputs.clean-branch }}
        echo "uninstall -n ${NAMESPACE} $release_name"
        helm uninstall -n ${NAMESPACE} $release_name || exit_code=$?          
      done
    shell: bash

  - name: Delete CDK Stacks
    id: delete_cdk
    if: always()
    env:
      AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
      AWS_REGION: ${{ inputs.aws-region }}
      BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}    
    run: |
      echo "Delete CDK Stacks: $BRANCH_NAME"
      cd ${{ inputs.cdk-folder }}
      cdk destroy --all -f
    shell: bash

  - name: Delete ECR Repository
    id: delete_ecr      
    if: always()
    env:
      AWS_ACCOUNT_ID: ${{ inputs.aws-account-id }}
      AWS_REGION: ${{ inputs.aws-region }}
      REPOSITORY_NAME: ${{ inputs.namespace }}/${{ steps.extract_branch.outputs.clean-branch }}    
    run: |
      if aws ecr describe-repositories --repository-names "$REPOSITORY_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
        echo "Repository exists. Proceeding with delete."
        echo "aws ecr delete-repository --repository-name ${REPOSITORY_NAME} --force " 
        aws ecr delete-repository --repository-name "${REPOSITORY_NAME}" --force 
      else
        echo "Repository does not exist. No action taken."
      fi
    shell: bash

  - name: Delete Branch Database    
    if: ${{ (inputs.delete-branch-db == 'true') && always() }}
    env:
      BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}
    run: |
      echo "Deleting branch database..."
      ${{ github.action_path }}/data/delete_branch_database.sh BuildUserDatabaseConnectionSettings $BRANCH_NAME || true
    shell: bash
